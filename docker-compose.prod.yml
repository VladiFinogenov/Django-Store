# Задаём имя проекта
name: megano

services:
    web:
        # Указываем директорию ./app, в которой содержится Dockerfile.prod для сборки образа
        build:
            context: ./app
            dockerfile: Dockerfile.prod
        # Запускаем сервер Gunicorn
        command: gunicorn megano.wsgi:application --bind 0.0.0.0:8000
        # Даем доступ для статики для любого контейнера
        volumes:
          - .:/app
          - static-data:/app/web/static
        # Пробрасываем 8000 порт контейнера на 8000 порт локалхоста(127.0.0.1:8000)
        ports:
            - 127.0.0.1:8000:8000
        # Файл содержащий переменные окружения для контейнера
        env_file:
            - .env.prod
        # Дожидаемся запуска контейнеров db и memcached
        depends_on:
            - db
            - redis

    redis:
        image: "redis:alpine"
        container_name: redis
        ports:
            - "6379:6379"

    db:
      # Берём образ БД PostgreSQL версии 16
        image: postgres:16
    # Примонтируем том postgres-data к директории /var/lib/postgresql/data контейнера db
        volumes:
            - postgres-data:/var/lib/postgresql/data
    # Файл содержащий переменные окружения для контейнера
        env_file:
            - .env.prod
    # Используем значения переменных окружения из .env.prod файла
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASS}

    celery:
        build:
            context: ./app
            dockerfile: Dockerfile.prod
        command: celery -A megano worker --loglevel=info
        env_file:
            - .env.prod
        depends_on:
            - db
            - redis

    celery-beat:
        build:
            context: ./app
            dockerfile: Dockerfile.prod
        command: celery -A megano beat --loglevel=info
#        volumes:
#            - ./app:/app
        env_file:
            - .env.prod
        depends_on:
            - db
            - redis

    nginx:
        # Указываем директорию ./nginx, в которой содержится Dockerfile для сборки образа
        build: ./nginx
        # Примонтируем том static-data к директории /home/app/web/static контейнера nginx
        volumes:
            - static-data:/home/app/web/static
        # Пробрасываем 80 порт контейнера на 80 порт локальной машины(порт будет доступен из вне)
        ports:
            - 80:80
        # Дожидаемся запуска контейнера web
        depends_on:
            - web

volumes:
    # Объявляем том postgres-data для хранения данных PostgreSQL
    postgres-data:
    static-data: